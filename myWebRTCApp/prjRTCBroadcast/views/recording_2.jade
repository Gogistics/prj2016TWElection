doctype html
html(lang="en")
  head
    // set icons
    link(rel="stylesheet" type="text/css" href="http://twitter.github.com/bootstrap/assets/css/bootstrap.css")
    style.
      input {border: 1px solid rgb(46, 189, 235);border-radius: 3px;font-size: 1em;outline: none;padding: .2em .4em;width: 60px;text-align: center;}
      button, select {font-family: Myriad, Arial, Verdana;font-weight: normal;border-top-left-radius: 3px;border-top-right-radius: 3px;border-bottom-right-radius: 3px;border-bottom-left-radius: 3px;padding: 4px 12px;text-decoration: none;color: rgb(27, 26, 26);display: inline-block;box-shadow: rgb(255, 255, 255) 1px 1px 0px 0px inset;text-shadow: none;background: -webkit-gradient(linear, 0% 0%, 0% 100%, color-stop(0.05, rgb(241, 241, 241)), to(rgb(230, 230, 230)));font-size: 20px;border: 1px solid red;outline:none;}
      button:active, button:focus, select:active {background: -webkit-gradient(linear, 0% 0%, 0% 100%, color-stop(5%, rgb(221, 221, 221)), to(rgb(250, 250, 250)));border: 1px solid rgb(142, 142, 142);}
      button[disabled], select[disabled] {background: rgb(249, 249, 249);border: 1px solid rgb(218, 207, 207);color: rgb(197, 189, 189);}
      blockquote {font-size: 20px;color: rgb(172, 10, 10);border: 1px solid rgb(172, 10, 10);padding: 5px 10px;border-radius: 5px;margin: 9px 10px;}
      span {border: 1px dotted red;background: yellow;padding: 0 5px;}

    script(src="https://cdn.webrtc-experiment.com/MediaStreamRecorder.js")
    script(src="https://cdn.rawgit.com/webrtc/adapter/master/adapter.js")
    title WebRTC Video Recording using MediaStreamRecorder
  body
    div
      label(for="time-interval") Time Interval (milliseconds):
      input(type="text" id="time-interval" value="5000")

      button(id="start-recording") Start
      button(id="stop-recording" disabled) Stop
      button(id="pause-recording" disabled) Pause
      button(id="resume-recording" disabled) Resume
      button(id="save-recording" disabled) Save

      br
      label(for="video-width") Video Width:
      input(type="text" id="video-width" value="320")

      label(for="video-height") Video Height:
      input(type="text" id="video-height" value="240")
    div(id="videos-container")

    // js
    script.
      /**/
      function captureUserMedia(mediaConstraints, successCallback, errorCallback) {
          navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);
      }
      var mediaConstraints = {
          audio: !IsChrome && !IsOpera && !IsEdge, // record both audio/video in Firefox
          video: true
      };
      document.querySelector('#start-recording').onclick = function() {
          this.disabled = true;
          captureUserMedia(mediaConstraints, onMediaSuccess, onMediaError);
      };
      document.querySelector('#stop-recording').onclick = function() {
          this.disabled = true;
          mediaRecorder.stop();
          mediaRecorder.stream.stop();
          document.querySelector('#pause-recording').disabled = true;
          document.querySelector('#start-recording').disabled = false;
      };
      document.querySelector('#pause-recording').onclick = function() {
          this.disabled = true;
          mediaRecorder.pause();
          document.querySelector('#resume-recording').disabled = false;
      };
      document.querySelector('#resume-recording').onclick = function() {
          this.disabled = true;
          mediaRecorder.resume();
          document.querySelector('#pause-recording').disabled = false;
      };
      document.querySelector('#save-recording').onclick = function() {
          this.disabled = true;
          mediaRecorder.save();
      };
      var mediaRecorder;
      function onMediaSuccess(stream) {
          var video = document.createElement('video');
          var videoWidth = document.getElementById('video-width').value || 320;
          var videoHeight = document.getElementById('video-height').value || 240;
          video = mergeProps(video, {
              controls: true,
              muted: true,
              width: videoWidth,
              height: videoHeight,
              src: URL.createObjectURL(stream)
          });
          video.play();
          videosContainer.appendChild(video);
          videosContainer.appendChild(document.createElement('hr'));
          mediaRecorder = new MediaStreamRecorder(stream);
          mediaRecorder.stream = stream;
          mediaRecorder.mimeType = 'video/webm'; // this line is mandatory
          mediaRecorder.videoWidth = videoWidth;
          mediaRecorder.videoHeight = videoHeight;
          mediaRecorder.ondataavailable = function(blob) {
              var a = document.createElement('a');
              a.target = '_blank';
              a.innerHTML = 'Open Recorded Video No. ' + (index++) + ' (Size: ' + bytesToSize(blob.size) + ') Time Length: ' + getTimeLength(timeInterval);
              a.href = URL.createObjectURL(blob);
              videosContainer.appendChild(a);
              videosContainer.appendChild(document.createElement('hr'));
          };
          var timeInterval = document.querySelector('#time-interval').value;
          if (timeInterval) timeInterval = parseInt(timeInterval);
          else timeInterval = 5 * 1000;
          // get blob after specific time interval
          mediaRecorder.start(timeInterval);
          document.querySelector('#stop-recording').disabled = false;
          document.querySelector('#pause-recording').disabled = false;
          document.querySelector('#save-recording').disabled = false;
      }
      function onMediaError(e) {
          console.error('media error', e);
      }
      var videosContainer = document.getElementById('videos-container');
      var index = 1;
      // below function via: http://goo.gl/B3ae8c
      function bytesToSize(bytes) {
          var k = 1000;
          var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
          if (bytes === 0) return '0 Bytes';
          var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);
          return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
      }
      // below function via: http://goo.gl/6QNDcI
      function getTimeLength(milliseconds) {
          var data = new Date(milliseconds);
          return data.getUTCHours() + " hours, " + data.getUTCMinutes() + " minutes and " + data.getUTCSeconds() + " second(s)";
      }
      window.onbeforeunload = function() {
          document.querySelector('#start-recording').disabled = false;
      };
